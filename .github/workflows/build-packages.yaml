---
name: 'Build unofficial VyOS .deb Packages'
run-name: 'Build unofficial VyOS `${{ inputs.release-train }}` .deb Packages'

on:
  workflow_dispatch:
    inputs:
      release-train:
        description: 'Release train to build packages for? (e.g. `sagitta`)'
        type: string
        required: true

jobs:
  build-packages-equuleus:
    name: 'Build and upload .deb packages (`equuleus`)'
    runs-on: ubuntu-latest
    if: ${{ contains(inputs.release-train, 'equuleus') || contains(inputs.release-train, 'all') }}
    permissions:
      contents: write
      packages: write
    container:
      image: 'vyos/vyos-build:equuleus'
      volumes:
        - /tmp/runner/work:/vyos
      options: '--privileged --sysctl net.ipv6.conf.lo.disable_ipv6=0 --workdir /vyos'
    steps:
      # - name: 'Install build dependencies'
      #   id: install-build-deps
      #   run: |
      #     set -eux
      #     echo -e 'APT::Install-Recommends "0";\nAPT::Install-Suggests "0";' > /etc/apt/apt.conf.d/01norecommends
      #     # We now have Debian Bullseye (11) so cached images require the permit to
      #     # change the releaseinfo from stable -> oldstable
      #     apt-get update --allow-releaseinfo-change
      #     apt-get install --yes \
      #       dialog \
      #       apt-utils \
      #       locales
      #     echo "en_US.UTF-8 UTF-8" > /etc/locale.gen && locale-gen
      #     export LANG=en_US.utf8
      #     apt-get install --yes \
      #       bash \
      #       bash-completion \
      #       vim \
      #       vim-autopep8 \
      #       nano \
      #       git \
      #       curl \
      #       sudo \
      #       mc \
      #       pbuilder \
      #       devscripts \
      #       equivs \
      #       lsb-release \
      #       libtool \
      #       libapt-pkg-dev \
      #       flake8 \
      #       pkg-config \
      #       debhelper \
      #       gosu \
      #       po4a \
      #       openssh-client \
      #       jq
      #     # Packages needed for vyos-build
      #     apt-get install --yes \
      #       build-essential \
      #       python3-pystache \
      #       squashfs-tools \
      #       genisoimage \
      #       fakechroot \
      #       python3-git \
      #       python3-pip \
      #       python3-flake8 \
      #       python3-autopep8
      #     # Syslinux and Grub2 is only supported on x86 and x64 systems
      #     if dpkg-architecture -ii386 || dpkg-architecture -iamd64; then \
      #       apt-get install --yes \
      #         syslinux \
      #         grub2; \
      #     fi
      #     #
      #     # Building libvyosconf requires a full configured OPAM/OCaml setup
      #     #
      #     apt-get install --yes \
      #       debhelper \
      #       libffi-dev \
      #       libpcre3-dev \
      #       unzip
      #     # Update certificate store to not crash ocaml package install
      #     # Apply fix for https in curl running on armhf
      #     dpkg-reconfigure ca-certificates; \
      #     if dpkg-architecture -iarmhf; then \
      #       echo "cacert=/etc/ssl/certs/ca-certificates.crt" >> ~/.curlrc; \
      #     fi
      #     # Installing OCAML needed to compile libvyosconfig
      #     curl https://raw.githubusercontent.com/ocaml/opam/master/shell/install.sh \
      #       --output /tmp/opam_install.sh --retry 10 --retry-delay 5 && \
      #     sed -i 's/read BINDIR/BINDIR=""/' /tmp/opam_install.sh && sh /tmp/opam_install.sh && \
      #     opam init --root=/opt/opam --comp=4.12.0 --disable-sandboxing
      #     eval $(opam env --root=/opt/opam --set-root) && \
      #     opam pin add pcre https://github.com/mmottl/pcre-ocaml.git#0c4ca03a -y
      #     eval $(opam env --root=/opt/opam --set-root) && opam install -y \
      #       re
      #     eval $(opam env --root=/opt/opam --set-root) && opam install -y \
      #       num \
      #       ctypes.0.16.0 \
      #       ctypes-foreign \
      #       ctypes-build \
      #       containers \
      #       fileutils
      #     # Build VyConf which is required to build libvyosconfig
      #     eval $(opam env --root=/opt/opam --set-root) && \
      #     opam pin add vyos1x-config https://github.com/vyos/vyos1x-config.git#51f6402a -y
      #     # Packages needed for libvyosconfig
      #     apt-get install --yes \
      #       quilt \
      #       libpcre3-dev \
      #       libffi-dev
      #     # Build libvyosconfig
      #     eval $(opam env --root=/opt/opam --set-root) && \
      #     git clone https://github.com/vyos/libvyosconfig.git /tmp/libvyosconfig && \
      #     cd /tmp/libvyosconfig && git checkout f2da09a9 && \
      #     dpkg-buildpackage -uc -us -tc -b && \
      #     dpkg -i /tmp/libvyosconfig0_*_$(dpkg-architecture -qDEB_HOST_ARCH).deb
      #     # Install open-vmdk
      #     wget -O /tmp/open-vmdk-master.zip https://github.com/vmware/open-vmdk/archive/master.zip && \
      #     unzip -d /tmp/ /tmp/open-vmdk-master.zip && \
      #     cd /tmp/open-vmdk-master/ && \
      #     make && \
      #     make install
      #     #
      #     # live-build: building with local packages fails due to missing keys
      #     # https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=941691
      #     # https://salsa.debian.org/live-team/live-build/merge_requests/30
      #     #
      #     wget https://salsa.debian.org/jestabro-guest/live-build/commit/63425b3e4f7ad3712ced4c9a3584ef9851c0355a.patch \
      #       -O /tmp/63425b3e4f7ad3712ced4c9a3584ef9851c0355a.patch && \
      #     git clone https://salsa.debian.org/live-team/live-build.git /tmp/live-build && \
      #     cd /tmp/live-build && git checkout debian/1%20190311 && \
      #     patch -p1 < /tmp/63425b3e4f7ad3712ced4c9a3584ef9851c0355a.patch && \
      #     dch -n "Applying fix for missing archive keys" && \
      #     dpkg-buildpackage -us -uc && \
      #     dpkg -i ../live-build*.deb
      #     #
      #     # live-build: building in docker fails with mounting /proc | /sys
      #     #
      #     # https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=919659
      #     # https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=921815
      #     # https://salsa.debian.org/installer-team/debootstrap/merge_requests/26
      #     #
      #     wget https://salsa.debian.org/klausenbusk-guest/debootstrap/commit/a9a603b17cadbf52cb98cde0843dc9f23a08b0da.patch \
      #       -O /tmp/a9a603b17cadbf52cb98cde0843dc9f23a08b0da.patch && \
      #     git clone https://salsa.debian.org/installer-team/debootstrap /tmp/debootstrap && \
      #     cd /tmp/debootstrap && git checkout 1.0.114 && \
      #     patch -p1 < /tmp/a9a603b17cadbf52cb98cde0843dc9f23a08b0da.patch && \
      #     dch -n "Applying fix for docker image compile" && \
      #     dpkg-buildpackage -us -uc && \
      #     dpkg -i ../debootstrap*.deb
      #     #
      #     # Install Packer
      #     #
      #     if dpkg-architecture -ii386 || dpkg-architecture -iamd64; then \
      #       export LATEST="$(curl -s https://checkpoint-api.hashicorp.com/v1/check/packer | \
      #       jq -r -M '.current_version')"; \
      #       echo "url https://releases.hashicorp.com/packer/${LATEST}/packer_${LATEST}_linux_amd64.zip" |\
      #         curl -K- | gzip -d > /usr/bin/packer && \
      #       chmod +x /usr/bin/packer; \
      #     fi
      #     # Packages needed for vyatta-cfg
      #     apt-get install --yes \
      #       autotools-dev \
      #       libglib2.0-dev \
      #       libboost-filesystem-dev \
      #       libapt-pkg-dev \
      #       libtool \
      #       flex \
      #       bison \
      #       libperl-dev \
      #       autoconf \
      #       automake \
      #       pkg-config \
      #       cpio
      #     # Packages needed for vyatta-cfg-firewall
      #     apt-get install --yes \
      #       autotools-dev \
      #       autoconf \
      #       automake \
      #       cpio
      #     # Packages needed for Linux Kernel
      #     # gnupg2 is required by Jenkins for the TAR verification
      #     apt-get install --yes \
      #       gnupg2 \
      #       rsync \
      #       libncurses5-dev \
      #       flex \
      #       bison \
      #       bc \
      #       kmod \
      #       cpio
      #     # Packages needed for Accel-PPP
      #     apt-get install --yes \
      #       liblua5.3-dev \
      #       libssl1.1 \
      #       libssl-dev \
      #       libpcre3-dev
      #     # Packages needed for Wireguard
      #     apt-get install --yes \
      #       debhelper-compat \
      #       dkms \
      #       pkg-config \
      #       systemd
      #     # Packages needed for iproute2
      #     apt-get install --yes \
      #       bison \
      #       debhelper \
      #       flex \
      #       iptables-dev \
      #       libatm1-dev \
      #       libcap-dev \
      #       libdb-dev \
      #       libbsd-dev \
      #       libelf-dev \
      #       libmnl-dev \
      #       libselinux1-dev \
      #       linux-libc-dev \
      #       pkg-config \
      #       po-debconf \
      #       zlib1g-dev
      #     # Prerequisites for building rtrlib
      #     # see http://docs.frrouting.org/projects/dev-guide/en/latest/building-frr-for-debian8.html
      #     apt-get install --yes \
      #       cmake \
      #       dpkg-dev \
      #       debhelper \
      #       libssh-dev \
      #       doxygen
      #     # Build rtrlib release 0.6.3
      #     export RTRLIB_VERSION="0.6.3" && export ARCH=$(dpkg-architecture -qDEB_HOST_ARCH) && \
      #     wget -P /tmp https://github.com/rtrlib/rtrlib/archive/v${RTRLIB_VERSION}.tar.gz && \
      #     tar xf /tmp/v${RTRLIB_VERSION}.tar.gz -C /tmp && \
      #     cd /tmp/rtrlib-${RTRLIB_VERSION} && dpkg-buildpackage -uc -us -tc -b && \
      #     dpkg -i ../librtr0*_${ARCH}.deb ../librtr-dev*_${ARCH}.deb ../rtr-tools*_${ARCH}.deb
      #     # Upgrading to FRR 7.5 requires a more recent version of libyang which is only
      #     # available from Debian Bullseye
      #     echo "deb http://deb.debian.org/debian/ bullseye main" \
      #       > /etc/apt/sources.list.d/bullseye.list && \
      #     apt-get install --yes -t bullseye \
      #       libyang-dev \
      #       libyang1; \
      #     rm -f /etc/apt/sources.list.d/bullseye.list
      #     # Packages needed to build FRR itself
      #     # https://github.com/FRRouting/frr/blob/master/doc/developer/building-libyang.rst
      #     # for more info
      #     apt-get install --yes \
      #       bison \
      #       chrpath \
      #       debhelper \
      #       flex \
      #       gawk \
      #       install-info \
      #       libc-ares-dev \
      #       libcap-dev \
      #       libjson-c-dev \
      #       libpam0g-dev \
      #       libpcre3-dev \
      #       libpython3-dev \
      #       libreadline-dev \
      #       librtr-dev \
      #       libsnmp-dev \
      #       libssh-dev \
      #       libsystemd-dev \
      #       libyang-dev \
      #       lsb-base \
      #       pkg-config \
      #       python3 \
      #       python3-dev \
      #       python3-pytest \
      #       python3-sphinx \
      #       texinfo
      #     # Packages needed for hvinfo
      #     apt-get install --yes \
      #       gnat \
      #       gprbuild
      #     # Packages needed for vyos-1x
      #     apt-get install --yes \
      #       fakeroot \
      #       libzmq3-dev \
      #       python3 \
      #       python3-setuptools \
      #       python3-sphinx \
      #       python3-xmltodict \
      #       python3-lxml \
      #       python3-nose \
      #       python3-netifaces \
      #       python3-jinja2 \
      #       python3-psutil \
      #       python3-coverage \
      #       quilt \
      #       whois
      #     # Packages needed for vyos-1x-xdp package, gcc-multilib is not available on
      #     # arm64 but required by XDP
      #     if dpkg-architecture -ii386 || dpkg-architecture -iamd64; then \
      #       apt-get install --yes \
      #         gcc-multilib \
      #         clang \
      #         llvm \
      #         libelf-dev \
      #         libpcap-dev \
      #         build-essential; \
      #       git clone https://github.com/libbpf/libbpf.git /tmp/libbpf && \
      #         cd /tmp/libbpf && git checkout b91f53ec5f1aba2 && cd src && make install; \
      #     fi
      #     # Go required for validators and vyos-xe-guest-utilities
      #     GO_VERSION_INSTALL="1.18.3" ; \
      #     wget -O /tmp/go${GO_VERSION_INSTALL}.linux-$(dpkg-architecture -qDEB_HOST_ARCH).tar.gz https://go.dev/dl/go${GO_VERSION_INSTALL}.linux-$(dpkg-architecture -qDEB_HOST_ARCH).tar.gz ; \
      #     tar -C /opt -xzf /tmp/go*.tar.gz && \
      #     rm /tmp/go*.tar.gz
      #     echo "export PATH=/opt/go/bin:$PATH" >> /etc/bash.bashrc
      #     # Packages needed for ipaddrcheck
      #     apt-get install --yes \
      #       libcidr0 \
      #       libcidr-dev \
      #       check
      #     # Packages needed for vyatta-quagga
      #     apt-get install --yes \
      #       libpam-dev \
      #       libcap-dev \
      #       libsnmp-dev \
      #       gawk
      #     # Packages needed for vyos-strongswan
      #     apt-get install --yes \
      #       bison \
      #       bzip2 \
      #       debhelper \
      #       dh-apparmor \
      #       dpkg-dev \
      #       flex \
      #       gperf \
      #       iptables-dev \
      #       libcap-dev \
      #       libcurl4-openssl-dev \
      #       libgcrypt20-dev \
      #       libgmp3-dev \
      #       libkrb5-dev \
      #       libldap2-dev \
      #       libnm-dev \
      #       libpam0g-dev \
      #       libsqlite3-dev \
      #       libssl-dev \
      #       libsystemd-dev \
      #       libtool \
      #       libxml2-dev \
      #       pkg-config \
      #       po-debconf \
      #       systemd \
      #       tzdata \
      #       python-setuptools \
      #       python3-stdeb
      #     # Packages needed for vyos-opennhrp
      #     apt-get install --yes \
      #       libc-ares-dev
      #     # Packages needed for Qemu test-suite
      #     # This is for now only supported on i386 and amd64 platforms
      #     if dpkg-architecture -ii386 || dpkg-architecture -iamd64; then \
      #       apt-get install --yes \
      #         python3-pexpect \
      #         ovmf \
      #         qemu-system-x86 \
      #         qemu-utils \
      #         qemu-kvm; \
      #     fi
      #     # Packages needed for building vmware and GCE images
      #     # This is only supported on i386 and amd64 platforms
      #     if dpkg-architecture -ii386 || dpkg-architecture -iamd64; then \
      #       apt-get install --yes \
      #         kpartx \
      #         parted \
      #         udev \
      #         grub-pc \
      #         grub2-common; \
      #     fi
      #     # Packages needed for vyos-cloud-init
      #     apt-get install --yes \
      #       pep8 \
      #       pyflakes \
      #       python3-configobj \
      #       python3-httpretty \
      #       python3-jsonpatch \
      #       python3-mock \
      #       python3-oauthlib \
      #       python3-pep8 \
      #       python3-pyflakes \
      #       python3-serial \
      #       python3-unittest2 \
      #       python3-yaml \
      #       python3-jsonschema \
      #       python3-contextlib2 \
      #       python3-pytest-cov \
      #       cloud-utils
      #     # Packages needed for libnss-mapuser & libpam-radius
      #     apt-get install --yes \
      #       libaudit-dev
      #     # Install utillities for building grub and u-boot images
      #     if dpkg-architecture -iarm64; then \
      #       apt-get install --yes \
      #         dosfstools \
      #         u-boot-tools \
      #         grub-efi-$(dpkg-architecture -qDEB_HOST_ARCH); \
      #     elif dpkg-architecture -iarmhf; then \
      #       apt-get install --yes \
      #         dosfstools \
      #         u-boot-tools \
      #         grub-efi-arm; \
      #     fi
      #     # Packages needed for libnftnl
      #     apt-get install --yes \
      #       debhelper-compat \
      #       libmnl-dev \
      #       libtool \
      #       pkg-config
      #     # Packages needed for nftables
      #     apt-get install --yes \
      #       asciidoc-base \
      #       automake \
      #       bison \
      #       debhelper-compat \
      #       dh-python \
      #       docbook-xsl \
      #       flex \
      #       libgmp-dev \
      #       libjansson-dev \
      #       libmnl-dev \
      #       libreadline-dev \
      #       libtool \
      #       libxtables-dev \
      #       python3-all \
      #       python3-setuptools \
      #       xsltproc
      #     # Packages needed for libnetfilter-conntrack
      #     apt-get install --yes \
      #       debhelper-compat \
      #       libmnl-dev \
      #       libnfnetlink-dev \
      #       libtool
      #     # Packages needed for conntrack-tools
      #     apt-get install --yes \
      #       bison \
      #       debhelper \
      #       flex \
      #       libmnl-dev \
      #       libnetfilter-cthelper0-dev \
      #       libnetfilter-cttimeout-dev \
      #       libnetfilter-queue-dev \
      #       libnfnetlink-dev \
      #       libsystemd-dev \
      #       autoconf \
      #       automake \
      #       libtool
      #     # Packages needed for wide-dhcpv6
      #     apt-get install --yes \
      #       bison \
      #       debhelper \
      #       flex \
      #       libfl-dev \
      #       rsync
      #     # Packages needed for vyos-http-api-tools
      #     apt-get install --yes \
      #       dh-virtualenv \
      #       python3-venv
      #     # Packages needed for ocserv
      #     apt-get install --yes \
      #       autogen \
      #       libev-dev \
      #       libgnutls28-dev \
      #       libhttp-parser-dev \
      #       liblz4-dev \
      #       libnl-route-3-dev \
      #       liboath-dev \
      #       liboauth-dev \
      #       libopts25-dev \
      #       libpcl1-dev \
      #       libprotobuf-c-dev \
      #       libradcli-dev \
      #       libseccomp-dev \
      #       libtalloc-dev \
      #       nettle-dev \
      #       protobuf-c-compiler \
      #       libgeoip-dev
      #     # Packages needed for keepalived
      #     apt-get install --yes \
      #       autoconf \
      #       libglib2.0-dev \
      #       libip4tc-dev \
      #       libipset-dev \
      #       libjson-c-dev \
      #       libnfnetlink-dev \
      #       libnftnl-dev \
      #       libnl-3-dev \
      #       libnl-genl-3-dev \
      #       libnl-nf-3-dev \
      #       libpcre2-dev \
      #       libpopt-dev \
      #       libsnmp-dev \
      #       libssl-dev \
      #       libsystemd-dev \
      #       linux-libc-dev \
      #       pkg-config
      #     # Packages needed for dropbear
      #     apt-get install --yes \
      #       debhelper-compat \
      #       dh-exec \
      #       libtomcrypt-dev \
      #       libtommath-dev \
      #       libz-dev
      #     # Packages needed for hostapd (wpa_supplicant)
      #     apt-get install --yes \
      #       libdbus-1-dev \
      #       libssl-dev \
      #       libncurses5-dev \
      #       libpcsclite-dev \
      #       libnl-3-dev \
      #       libnl-genl-3-dev \
      #       libnl-route-3-dev  \
      #       libreadline-dev \
      #       pkg-config \
      #       docbook-to-man \
      #       docbook-utils
      #     # Packages needed for ocserv
      #     apt-get install --yes \
      #       autogen \
      #       debhelper \
      #       freeradius \
      #       gawk \
      #       gnutls-bin \
      #       gperf \
      #       gss-ntlmssp \
      #       haproxy \
      #       iproute2 \
      #       iputils-ping \
      #       libcjose-dev \
      #       libcurl4-gnutls-dev \
      #       libev-dev \
      #       libgnutls28-dev \
      #       libhttp-parser-dev \
      #       libjansson-dev \
      #       libkrb5-dev \
      #       liblz4-dev \
      #       libmaxminddb-dev \
      #       libnl-route-3-dev \
      #       libnss-wrapper \
      #       liboath-dev \
      #       libpam-wrapper \
      #       libpam0g-dev \
      #       libprotobuf-c-dev \
      #       libradcli-dev \
      #       libreadline-dev \
      #       libseccomp-dev \
      #       libsocket-wrapper \
      #       libtalloc-dev \
      #       libuid-wrapper \
      #       nettle-dev \
      #       nuttcp \
      #       pkg-config \
      #       protobuf-c-compiler \
      #       ronn \
      #       tcpdump \
      #       yajl-tools
      #     #
      #     # fpm: a command-line program designed to help you build packages (e.g. deb)
      #     #
      #     apt-get install --yes \
      #       ruby \
      #       ruby-dev \
      #       rubygems \
      #       build-essential
      #     gem install public_suffix -v 4.0.7
      #     gem install --no-document dotenv -v 2.8.1
      #     gem install --no-document fpm
      #     # debmake: a native Debian tool for preparing sources for packaging
      #     apt-get install --yes \
      #       debmake \
      #       python3-debian
      - name: 'Clone the `vyos-build` repository'
        id: clone-vyos-build
        run: |
          set -eux
          git clone -b equuleus --single-branch https://github.com/vyos/vyos-build
      - name: 'Get Linux kernel version'
        id: get-kernel-version
        run: |
          set -eux
          echo "KERNEL_VERSION=$(jq -r '.kernel_version' vyos-build/data/defaults.json)" >> "$GITHUB_ENV"
      - name: 'Build the Linux kernel'
        id: build-kernel
        run: |
          set -eux
          cd vyos-build/packages/linux-kernel
          gpg2 --locate-keys torvalds@kernel.org gregkh@kernel.org
          curl -OL https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-${KERNEL_VERSION}.tar.xz
          curl -OL https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-${KERNEL_VERSION}.tar.sign
          xz -cd linux-${KERNEL_VERSION}.tar.xz | gpg2 --verify linux-${KERNEL_VERSION}.tar.sign -; if [ $? -ne 0 ]; then exit 1; fi
          tar xf linux-${KERNEL_VERSION}.tar.xz
          ln -s linux-${KERNEL_VERSION} linux
          ./build-kernel.sh
      - name: 'Build the `vyos-linux-firmware` package'
        id: build-kernel-firmware
        run: |
          set -eux
          cd vyos-build/packages/linux-kernel
          git clone https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git
          git -C linux-firmware reset --hard $(grep -A 5 '/linux-firmware' Jenkinsfile | grep 'branches' | awk -v sq="'" '/branches/ { gsub(sq, "", $3); print $3 }')
          ./build-linux-firmware.sh
      - name: 'Build the `accel-ppp` package'
        id: build-accel-ppp
        run: |
          set -eux
          cd vyos-build/packages/linux-kernel
          git clone https://github.com/accel-ppp/accel-ppp.git
          ./build-accel-ppp.sh
      - name: 'Build the `vyos-drivers-intel-ice` package'
        id: build-intel-ice
        run: |
          set -eux
          cd vyos-build/packages/linux-kernel
          ./build-intel-ice.py
      - name: 'Build the `intel-qat` package'
        id: build-intel-qat
        run: |
          set -eux
          cd vyos-build/packages/linux-kernel
          ./build-intel-qat.sh
      - name: 'Build the `wireguard-modules` package'
        id: build-wireguard-modules
        run: |
          set -eux
          cd vyos-build/packages/linux-kernel
          git clone https://salsa.debian.org/debian/wireguard-linux-compat.git
          git -C wireguard-linux-compat reset --hard $(grep -A 5 'wireguard-linux-compat' Jenkinsfile | grep 'branches' | awk -v sq="'" '/branches/ { gsub(sq, "", $3); print $3 }')
          ./build-wireguard-modules.sh
      - name: 'Build the `vyos-1x` packages'
        id: build-vyos-1x
        run: |
          set -eux
          cd vyos-build
          git clone -b equuleus --single-branch https://github.com/vyos/vyos-1x
          cd vyos-1x
          dpkg-buildpackage -uc -us -tc -b
      - name: 'Create a new release'
        id: create-release
        uses: ncipollo/release-action@v1.14.0
        with:
          name: "Unofficial VyOS Packages (`${{ inputs.release-train }}`)"
          tag: "packages-${{ inputs.release-train }}"
          artifacts: "vyos-build/*.deb, vyos-build/packages/linux-kernel/*.deb"
          artifactContentType: application/vnd.debian.binary-package
          artifactErrorsFailBuild: true
          draft: true
          allowUpdates: false
          omitDraftDuringUpdate: true

  build-packages-sagitta:
    name: 'Build and upload .deb packages (`sagitta`)'
    runs-on: [self-hosted, sagitta]
    if: ${{ contains(inputs.release-train, 'sagitta') || contains(inputs.release-train, 'all') }}
    permissions:
      contents: write
      packages: write
    steps:
      - name: 'Install build dependencies'
        id: install-build-deps
        run: |
          set -eux
          /bin/echo -e 'APT::Install-Recommends "0";\nAPT::Install-Suggests "0";' > /etc/apt/apt.conf.d/01norecommends
          apt-get update
          apt-get install --yes \
            cmake
          apt-get install --yes \
            dialog \
            apt-utils \
            locales
          echo "en_US.UTF-8 UTF-8" > /etc/locale.gen && locale-gen
          export LANG=en_US.utf8
          export OCAML_VERSION=4.12.0
          # Base packages needed to build packages and their package dependencies
          apt-get install --yes \
            bash \
            bash-completion \
            vim \
            vim-autopep8 \
            nano \
            git \
            curl \
            sudo \
            mc \
            pbuilder \
            devscripts \
            equivs \
            lsb-release \
            libtool \
            libapt-pkg-dev \
            flake8 \
            pkg-config \
            debhelper \
            gosu \
            po4a \
            openssh-client \
            jq
          # Packages needed for vyos-build
          apt-get install --yes \
            build-essential \
            python3-pystache \
            squashfs-tools \
            genisoimage \
            fakechroot \
            pipx \
            python3-git \
            python3-pip \
            python3-flake8 \
            python3-autopep8 \
            python3-tomli \
            yq \
            debootstrap \
            live-build \
            gdisk \
            dosfstools
          # Syslinux and Grub2 is only supported on x86 and x64 systems
          if dpkg-architecture -ii386 || dpkg-architecture -iamd64; then \
            apt-get install --yes \
              syslinux \
              grub2; \
          fi
          # Building libvyosconf requires a full configured OPAM/OCaml setup
          apt-get install --yes \
            debhelper \
            libffi-dev \
            libpcre3-dev \
            unzip
          # Update certificate store to not crash ocaml package install
          # Apply fix for https in curl running on armhf
          dpkg-reconfigure ca-certificates; \
          if dpkg-architecture -iarmhf; then \
            echo "cacert=/etc/ssl/certs/ca-certificates.crt" >> ~/.curlrc; \
          fi
          # Installing OCAML needed to compile libvyosconfig
          curl https://raw.githubusercontent.com/ocaml/opam/master/shell/install.sh \
            --output /tmp/opam_install.sh --retry 10 --retry-delay 5 && \
          sed -i 's/read BINDIR/BINDIR=""/' /tmp/opam_install.sh && sh /tmp/opam_install.sh && \
          opam init --root=/opt/opam --comp=${OCAML_VERSION} --disable-sandboxing --no-setup
          eval $(opam env --root=/opt/opam --set-root) && \
          opam pin add pcre https://github.com/mmottl/pcre-ocaml.git#0c4ca03a -y
          eval $(opam env --root=/opt/opam --set-root) && opam install -y \
            re \
            num \
            ctypes \
            ctypes-foreign \
            ctypes-build \
            containers \
            fileutils \
            xml-light
          # Build VyConf which is required to build libvyosconfig
          eval $(opam env --root=/opt/opam --set-root) && \
          opam pin add vyos1x-config https://github.com/vyos/vyos1x-config.git#8c65eb12 -y
          # Packages needed for libvyosconfig
          apt-get update && apt-get install -y \
            quilt \
            libpcre3-dev \
            libffi-dev
          # Build libvyosconfig
          eval $(opam env --root=/opt/opam --set-root) && \
          git clone https://github.com/vyos/libvyosconfig.git /tmp/libvyosconfig && \
          cd /tmp/libvyosconfig && git checkout 6c1f8a3f && \
          dpkg-buildpackage -uc -us -tc -b && \
          dpkg -i /tmp/libvyosconfig0_*_$(dpkg-architecture -qDEB_HOST_ARCH).deb
          # Packages needed for libvyosconfig
          apt-get install --yes \
            quilt \
            libpcre3-dev \
            libffi-dev
          # Packages needed for open-vmdk
          apt-get install --yes \
            zlib1g-dev
          # Install open-vmdk
          wget -O /tmp/open-vmdk-master.zip https://github.com/vmware/open-vmdk/archive/master.zip && \
          unzip -d /tmp/ /tmp/open-vmdk-master.zip && \
          cd /tmp/open-vmdk-master/ && make && make install
          #
          # live-build: building in docker fails with mounting /proc | /sys
          #
          # https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=919659
          # https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=921815
          # https://salsa.debian.org/installer-team/debootstrap/merge_requests/26
          #
          wget https://salsa.debian.org/klausenbusk-guest/debootstrap/commit/a9a603b17cadbf52cb98cde0843dc9f23a08b0da.patch \
            -O /tmp/a9a603b17cadbf52cb98cde0843dc9f23a08b0da.patch && \
          git clone https://salsa.debian.org/installer-team/debootstrap /tmp/debootstrap && \
          cd /tmp/debootstrap && git checkout 1.0.114 && \
          patch -p1 < /tmp/a9a603b17cadbf52cb98cde0843dc9f23a08b0da.patch && \
          dch -n "Applying fix for docker image compile" && \
          dpkg-buildpackage -us -uc && \
          dpkg -i ../debootstrap*.deb
          # Packages needed for Linux Kernel
          # gnupg2 is required by Jenkins for the TAR verification
          apt-get install --yes \
            gnupg2 \
            rsync \
            libelf-dev \
            libncurses5-dev \
            flex \
            bison \
            bc \
            kmod \
            cpio \
            python-is-python3 \
            dwarves \
            nasm \
            rdfind
          # Packages needed for Intel QAT out-of-tree drivers
          # FPM is used when generation Debian pckages for e.g. Intel QAT drivers
          apt-get install --yes \
            pciutils \
            yasm \
            ruby \
            libudev-dev \
            ruby-dev \
            rubygems \
            build-essential
          gem install --no-document fpm
          # Packages needed for vyos-1x
          pip install --break-system-packages \
            git+https://github.com/aristanetworks/j2lint.git@341b5d5db86 \
            pyhumps==3.8.0; \
          apt-get install --yes \
            dh-python \
            fakeroot \
            iproute2 \
            libzmq3-dev \
            procps \
            python3 \
            python3-setuptools \
            python3-inotify \
            python3-xmltodict \
            python3-lxml \
            python3-nose \
            python3-netifaces \
            python3-jinja2 \
            python3-jmespath \
            python3-psutil \
            python3-stdeb \
            python3-all \
            python3-coverage \
            pylint \
            quilt \
            whois
          # Go required for validators and vyos-xe-guest-utilities
          GO_VERSION_INSTALL="1.21.3" ; \
          wget -O /tmp/go${GO_VERSION_INSTALL}.linux-amd64.tar.gz https://go.dev/dl/go${GO_VERSION_INSTALL}.linux-$(dpkg-architecture -qDEB_HOST_ARCH).tar.gz ; \
          tar -C /opt -xzf /tmp/go*.tar.gz && \
          rm /tmp/go*.tar.gz
          echo "export PATH=/opt/go/bin:$PATH" >> /etc/bash.bashrc
          # Packages needed for opennhrp
          apt-get install --yes \
            libc-ares-dev \
            libev-dev
          # Packages needed for Qemu test-suite
          # This is for now only supported on i386 and amd64 platforms
          if dpkg-architecture -ii386 || dpkg-architecture -iamd64; then \
            apt-get install --yes \
              python3-pexpect \
              ovmf \
              qemu-system-x86 \
              qemu-utils \
              qemu-kvm; \
          fi
          # Packages needed for building vmware and GCE images
          # This is only supported on i386 and amd64 platforms
          if dpkg-architecture -ii386 || dpkg-architecture -iamd64; then \
          apt-get install --yes \
            kpartx \
            parted \
            udev \
            grub-pc \
            grub2-common; \
          fi
          # Packages needed for vyos-cloud-init
          apt-get install --yes \
            python3-configobj \
            python3-httpretty \
            python3-jsonpatch \
            python3-mock \
            python3-oauthlib \
            python3-pep8 \
            python3-pyflakes \
            python3-serial \
            python3-unittest2 \
            python3-yaml \
            python3-jsonschema \
            python3-contextlib2 \
            python3-pytest-cov \
            cloud-utils
          # Install utillities for building grub and u-boot images
          if dpkg-architecture -iarm64; then \
          apt-get install --yes \
            dosfstools \
            u-boot-tools \
            grub-efi-$(dpkg-architecture -qDEB_HOST_ARCH); \
          elif dpkg-architecture -iarmhf; then \
          apt-get install --yes \
            dosfstools \
            u-boot-tools \
            grub-efi-arm; \
          fi
          # Packages needed for openvpn-otp
          apt-get install --yes \
            debhelper \
            libssl-dev \
            openvpn
          # Packages needed for OWAMP/TWAMP (service sla)
          git clone -b 4.4.6 https://github.com/perfsonar/i2util.git /tmp/i2util && \
            cd /tmp/i2util && \
            dpkg-buildpackage -uc -us -tc -b && \
            dpkg -i /tmp/*i2util*_$(dpkg-architecture -qDEB_HOST_ARCH).deb
          # Creating image for embedded systems needs this utilities to prepare a image file
          apt-get install --yes \
            parted \
            udev \
            zip
          # Packages needed for Accel-PPP
          # XXX: please note that this must be installed after nftable dependencies - otherwise
          # APT will remove liblua5.3-dev which breaks the Accel-PPP build
          # With bookworm, updated to libssl3 (Note: https://github.com/accel-ppp/accel-ppp/issues/68)
          apt-get install --yes \
            liblua5.3-dev \
            libssl3 \
            libssl-dev \
            libpcre3-dev
          # debmake: a native Debian tool for preparing sources for packaging
          apt-get install --yes \
            debmake \
            python3-debian
          # Packages for jool
          apt-get install --yes \
            libnl-genl-3-dev \
            libxtables-dev
          # Packages needed for nftables
          apt-get install --yes \
            asciidoc-base
      - name: 'Clone the `vyos-build` repository'
        id: clone-vyos-build
        run: |
          set -eux
          rm --recursive --force vyos-build
          git clone -b sagitta --single-branch https://github.com/vyos/vyos-build
      - name: 'Get Linux kernel version'
        id: get-kernel-version
        run: |
          set -eux
          pip3 install --break-system-packages tomlq
          echo "KERNEL_VERSION=$(tomlq -r '.kernel_version' vyos-build/data/defaults.toml)" >> "$GITHUB_ENV"
      - name: 'Build the Linux kernel'
        id: build-kernel
        run: |
          set -eux
          cd vyos-build/packages/linux-kernel
          gpg2 --locate-keys torvalds@kernel.org gregkh@kernel.org
          curl -OL https://cdn.kernel.org/pub/linux/kernel/v6.x/linux-${KERNEL_VERSION}.tar.xz
          curl -OL https://cdn.kernel.org/pub/linux/kernel/v6.x/linux-${KERNEL_VERSION}.tar.sign
          xz -cd linux-${KERNEL_VERSION}.tar.xz | gpg2 --verify linux-${KERNEL_VERSION}.tar.sign -; if [ $? -ne 0 ]; then exit 1; fi
          tar xf linux-${KERNEL_VERSION}.tar.xz
          ln -s linux-${KERNEL_VERSION} linux
          ./build-kernel.sh
      - name: 'Build the `vyos-linux-firmware` package'
        id: build-kernel-firmware
        run: |
          set -eux
          cd vyos-build/packages/linux-kernel
          git clone https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git
          git -C linux-firmware reset --hard $(awk -v sq="'" '/.name....linux-firmware./ { gsub(/,/, "", $4); gsub(sq, "", $4); print $4 }' Jenkinsfile)
          ./build-linux-firmware.sh
      - name: 'Build the `accel-ppp` package'
        id: build-accel-ppp
        run: |
          set -eux
          cd vyos-build/packages/linux-kernel
          git clone https://github.com/accel-ppp/accel-ppp.git
          git -C accel-ppp reset --hard $(grep -A 5 'accel-ppp' Jenkinsfile | awk -v sq="'" '/scmCommit/ { gsub(/,/, "", $4); gsub(sq, "", $4); print $4 }')
          ./build-accel-ppp.sh
      - name: 'Build the `vyos-intel-ixgbe` package'
        id: build-intel-ixgbe
        run: |
          set -eux
          cd vyos-build/packages/linux-kernel
          ./build-intel-ixgbe.sh
      - name: 'Build the `vyos-intel-ixgbevf` package'
        id: build-intel-ixgbevf
        run: |
          set -eux
          cd vyos-build/packages/linux-kernel
          ./build-intel-ixgbevf.sh
      - name: 'Build the `intel-qat` package'
        id: build-intel-qat
        run: |
          set -eux
          cd vyos-build/packages/linux-kernel
          ./build-intel-qat.sh
      - name: 'Build the `ovpn-dco` package'
        id: build-ovpn-dco
        run: |
          set -eux
          cd vyos-build/packages/linux-kernel
          git clone https://github.com/OpenVPN/ovpn-dco.git
          git -C ovpn-dco reset --hard $(awk -v sq="'" '/.name....ovpn-dco./ { gsub(/,/, "", $3); gsub(sq, "", $3); print $3 }' Jenkinsfile)
          ./build-openvpn-dco.sh
      - name: 'Build the `telegraf` package'
        id: build-telegraf
        run: |
          set -eux
          cd vyos-build/packages/telegraf
          git clone https://github.com/influxdata/telegraf.git
          git -C telegraf reset --hard $(awk -v sq="'" '/.scmCommit./ { gsub(/,/, "", $2); gsub(sq, "", $2); print $2 }' Jenkinsfile)
          ./build.sh
      - name: 'Build the `vyos-1x` packages'
        id: build-vyos-1x
        run: |
          set -eux
          cd vyos-build
          git clone -b sagitta --single-branch https://github.com/vyos/vyos-1x
          cd vyos-1x
          dpkg-buildpackage -uc -us -tc -b
      - name: 'Create a new release'
        id: create-release
        uses: ncipollo/release-action@v1
        with:
          name: "Unofficial VyOS Packages (`${{ inputs.release-train }}`)"
          tag: "packages-${{ inputs.release-train }}"
          artifacts: "vyos-build/*.deb, vyos-build/packages/linux-kernel/*.deb"
          artifactContentType: application/vnd.debian.binary-package
          artifactErrorsFailBuild: true
          draft: true
          allowUpdates: false
          omitDraftDuringUpdate: true
